/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.vainolo.phd.opm.model.provider;

import com.vainolo.phd.opm.model.util.OPMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OPMItemProviderAdapterFactory extends OPMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
     * This constructs an instance.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public OPMItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

	/**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMObjectProcessDiagram} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected OPMObjectProcessDiagramItemProvider opmObjectProcessDiagramItemProvider;

	/**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMObjectProcessDiagram}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createOPMObjectProcessDiagramAdapter() {
        if (opmObjectProcessDiagramItemProvider == null) {
            opmObjectProcessDiagramItemProvider = new OPMObjectProcessDiagramItemProvider(this);
        }

        return opmObjectProcessDiagramItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMObject} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected OPMObjectItemProvider opmObjectItemProvider;

	/**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMObject}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createOPMObjectAdapter() {
        if (opmObjectItemProvider == null) {
            opmObjectItemProvider = new OPMObjectItemProvider(this);
        }

        return opmObjectItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMProcess} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected OPMProcessItemProvider opmProcessItemProvider;

	/**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMProcess}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createOPMProcessAdapter() {
        if (opmProcessItemProvider == null) {
            opmProcessItemProvider = new OPMProcessItemProvider(this);
        }

        return opmProcessItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMThing} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected OPMThingItemProvider opmThingItemProvider;

	/**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMThing}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createOPMThingAdapter() {
        if (opmThingItemProvider == null) {
            opmThingItemProvider = new OPMThingItemProvider(this);
        }

        return opmThingItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMProceduralLink} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected OPMProceduralLinkItemProvider opmProceduralLinkItemProvider;

	/**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMProceduralLink}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createOPMProceduralLinkAdapter() {
        if (opmProceduralLinkItemProvider == null) {
            opmProceduralLinkItemProvider = new OPMProceduralLinkItemProvider(this);
        }

        return opmProceduralLinkItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMAgentLink} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMAgentLinkItemProvider opmAgentLinkItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMAgentLink}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMAgentLinkAdapter() {
        if (opmAgentLinkItemProvider == null) {
            opmAgentLinkItemProvider = new OPMAgentLinkItemProvider(this);
        }

        return opmAgentLinkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMInstrumentLink} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMInstrumentLinkItemProvider opmInstrumentLinkItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMInstrumentLink}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMInstrumentLinkAdapter() {
        if (opmInstrumentLinkItemProvider == null) {
            opmInstrumentLinkItemProvider = new OPMInstrumentLinkItemProvider(this);
        }

        return opmInstrumentLinkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMConsumptionLink} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMConsumptionLinkItemProvider opmConsumptionLinkItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMConsumptionLink}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMConsumptionLinkAdapter() {
        if (opmConsumptionLinkItemProvider == null) {
            opmConsumptionLinkItemProvider = new OPMConsumptionLinkItemProvider(this);
        }

        return opmConsumptionLinkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMResultLink} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMResultLinkItemProvider opmResultLinkItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMResultLink}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMResultLinkAdapter() {
        if (opmResultLinkItemProvider == null) {
            opmResultLinkItemProvider = new OPMResultLinkItemProvider(this);
        }

        return opmResultLinkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMEffectLink} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMEffectLinkItemProvider opmEffectLinkItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMEffectLink}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMEffectLinkAdapter() {
        if (opmEffectLinkItemProvider == null) {
            opmEffectLinkItemProvider = new OPMEffectLinkItemProvider(this);
        }

        return opmEffectLinkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMStructuralLink} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMStructuralLinkItemProvider opmStructuralLinkItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMStructuralLink}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMStructuralLinkAdapter() {
        if (opmStructuralLinkItemProvider == null) {
            opmStructuralLinkItemProvider = new OPMStructuralLinkItemProvider(this);
        }

        return opmStructuralLinkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.NamedElement} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NamedElementItemProvider namedElementItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.NamedElement}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNamedElementAdapter() {
        if (namedElementItemProvider == null) {
            namedElementItemProvider = new NamedElementItemProvider(this);
        }

        return namedElementItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.NodeContainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NodeContainerItemProvider nodeContainerItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.NodeContainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNodeContainerAdapter() {
        if (nodeContainerItemProvider == null) {
            nodeContainerItemProvider = new NodeContainerItemProvider(this);
        }

        return nodeContainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMStructuralLinkAggregator} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected OPMStructuralLinkAggregatorItemProvider opmStructuralLinkAggregatorItemProvider;

	/**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMStructuralLinkAggregator}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createOPMStructuralLinkAggregatorAdapter() {
        if (opmStructuralLinkAggregatorItemProvider == null) {
            opmStructuralLinkAggregatorItemProvider = new OPMStructuralLinkAggregatorItemProvider(this);
        }

        return opmStructuralLinkAggregatorItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMAggregationLinkAggregator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMAggregationLinkAggregatorItemProvider opmAggregationLinkAggregatorItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMAggregationLinkAggregator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMAggregationLinkAggregatorAdapter() {
        if (opmAggregationLinkAggregatorItemProvider == null) {
            opmAggregationLinkAggregatorItemProvider = new OPMAggregationLinkAggregatorItemProvider(this);
        }

        return opmAggregationLinkAggregatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMExhibitionLinkAggregator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMExhibitionLinkAggregatorItemProvider opmExhibitionLinkAggregatorItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMExhibitionLinkAggregator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMExhibitionLinkAggregatorAdapter() {
        if (opmExhibitionLinkAggregatorItemProvider == null) {
            opmExhibitionLinkAggregatorItemProvider = new OPMExhibitionLinkAggregatorItemProvider(this);
        }

        return opmExhibitionLinkAggregatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMGeneralizationLinkAggregator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMGeneralizationLinkAggregatorItemProvider opmGeneralizationLinkAggregatorItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMGeneralizationLinkAggregator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMGeneralizationLinkAggregatorAdapter() {
        if (opmGeneralizationLinkAggregatorItemProvider == null) {
            opmGeneralizationLinkAggregatorItemProvider = new OPMGeneralizationLinkAggregatorItemProvider(this);
        }

        return opmGeneralizationLinkAggregatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.vainolo.phd.opm.model.OPMState} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OPMStateItemProvider opmStateItemProvider;

    /**
     * This creates an adapter for a {@link com.vainolo.phd.opm.model.OPMState}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOPMStateAdapter() {
        if (opmStateItemProvider == null) {
            opmStateItemProvider = new OPMStateItemProvider(this);
        }

        return opmStateItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

	/**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

	/**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

	/**
     * This adds a listener.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

	/**
     * This removes a listener.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

	/**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

	/**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void dispose() {
        if (namedElementItemProvider != null) namedElementItemProvider.dispose();
        if (nodeContainerItemProvider != null) nodeContainerItemProvider.dispose();
        if (opmObjectProcessDiagramItemProvider != null) opmObjectProcessDiagramItemProvider.dispose();
        if (opmStateItemProvider != null) opmStateItemProvider.dispose();
        if (opmThingItemProvider != null) opmThingItemProvider.dispose();
        if (opmObjectItemProvider != null) opmObjectItemProvider.dispose();
        if (opmProcessItemProvider != null) opmProcessItemProvider.dispose();
        if (opmStructuralLinkAggregatorItemProvider != null) opmStructuralLinkAggregatorItemProvider.dispose();
        if (opmAggregationLinkAggregatorItemProvider != null) opmAggregationLinkAggregatorItemProvider.dispose();
        if (opmExhibitionLinkAggregatorItemProvider != null) opmExhibitionLinkAggregatorItemProvider.dispose();
        if (opmGeneralizationLinkAggregatorItemProvider != null) opmGeneralizationLinkAggregatorItemProvider.dispose();
        if (opmProceduralLinkItemProvider != null) opmProceduralLinkItemProvider.dispose();
        if (opmAgentLinkItemProvider != null) opmAgentLinkItemProvider.dispose();
        if (opmInstrumentLinkItemProvider != null) opmInstrumentLinkItemProvider.dispose();
        if (opmConsumptionLinkItemProvider != null) opmConsumptionLinkItemProvider.dispose();
        if (opmResultLinkItemProvider != null) opmResultLinkItemProvider.dispose();
        if (opmEffectLinkItemProvider != null) opmEffectLinkItemProvider.dispose();
        if (opmStructuralLinkItemProvider != null) opmStructuralLinkItemProvider.dispose();
    }

}
